# --- Source External Scripts ---
{{ if eq .chezmoi.os "darwin" }}

# Command Not Found (Homebrew - Macos)
HB_CNF_HANDLER="/opt/homebrew/Homebrew/Library/Taps/homebrew/homebrew-command-not-found/handler.sh"
if [ -f "$HB_CNF_HANDLER" ]; then
    source "$HB_CNF_HANDLER";
fi

# Autojump
[ -f /opt/homebrew/etc/profile.d/autojump.sh ] && . /opt/homebrew/etc/profile.d/autojump.sh

# Brew Autocomplete
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi

# Autosuggestions
[ -f "/opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ] && source "/opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

{{ else if eq .chezmoi.osRelease.name "NixOS" }}

# Autojump
[ -f "/run/current-system/sw/share/zsh/site-functions/autojump.zsh" ] && source "/run/current-system/sw/share/zsh/site-functions/autojump.zsh"

{{ else if eq .chezmoi.os "linux" }}

# Command Not Found (Linux)
[ -f "/etc/zsh_command_not_found" ] && source "/etc/zsh_command_not_found"

# Autosuggestions
[ -f "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ] && source "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# Autojump
[ -f "/usr/share/autojump/autojump.zsh" ] && source "/usr/share/autojump/autojump.zsh"

{{ else }}

# Command Not Found (Linux)
[ -f "/etc/zsh_command_not_found" ] && source "/etc/zsh_command_not_found"

# Autosuggestions
[ -f "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ] && source "/usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# Autojump
[ -f "/usr/share/autojump/autojump.zsh" ] && source "/usr/share/autojump/autojump.zsh"


{{ end }}


# Git prompt
[ -f "${ZDOTDIR}/plugins/git-prompt.zsh" ] && source "${ZDOTDIR}/plugins/git-prompt.zsh"
 
# Load aliases if existent.
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc"

# Kubectl Aliases
[ -f "${ZDOTDIR}/plugins/kubectl.plugin.zsh" ] && source "${ZDOTDIR}/plugins/kubectl.plugin.zsh"

# Define Git Prompt Options
ZSH_GIT_PROMPT_SHOW_UPSTREAM="no"

ZSH_THEME_GIT_PROMPT_PREFIX="("
ZSH_THEME_GIT_PROMPT_SUFFIX=")"
ZSH_THEME_GIT_PROMPT_SEPARATOR="|"
ZSH_THEME_GIT_PROMPT_DETACHED="%{$fg_bold[cyan]%}:"
ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg_bold[green]%}"
ZSH_THEME_GIT_PROMPT_UPSTREAM_SYMBOL="%{$fg_bold[yellow]%}⟳ "
ZSH_THEME_GIT_PROMPT_UPSTREAM_PREFIX="%{$fg[red]%}(%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_UPSTREAM_SUFFIX="%{$fg[red]%})"
ZSH_THEME_GIT_PROMPT_BEHIND="↓"
ZSH_THEME_GIT_PROMPT_AHEAD="↑"
ZSH_THEME_GIT_PROMPT_UNMERGED="%{$fg[red]%}✖"
ZSH_THEME_GIT_PROMPT_STAGED="%{$fg[green]%}●"
ZSH_THEME_GIT_PROMPT_UNSTAGED="%{$fg[red]%}✚"
ZSH_THEME_GIT_PROMPT_UNTRACKED="…"
ZSH_THEME_GIT_PROMPT_STASHED="%{$fg[blue]%}⚑"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg_bold[green]%}✔"

# Prompt
PS1='[%{$fg_bold[white]%}%n@%{$fg_bold[white]%}%m%{$reset_color%} %{$fg[cyan]%}%~%{$reset_color%} $(gitprompt)%{$reset_color%}]$ '

{{ if eq .chezmoi.os "darwin" }}

# Add x86_64 prompt alias for Rosetta
alias arch-x86="arch -x86_64 $SHELL"

# Allow x86 and arm64 versions of Homebrew
if [ "$(arch)" = "arm64" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
else
    eval "$(/usr/local/bin/brew shellenv)"
    export PROMPT=\(x86_64\)\ $PROMPT
fi

{{ end }}

# --- Options ---
autoload -U colors && colors	# Load colors
autoload edit-command-line 
zle -N edit-command-line
setopt autocd		# Automatically cd into typed directory.
setopt interactive_comments
setopt histignoredups
setopt share_history
setopt HIST_IGNORE_SPACE
setopt NO_CASE_GLOB
 
# Persistent rehash for installing new programs
zstyle ':completion:*' rehash true

# History in zsh directory:
HISTFILE="${ZDOTDIR:-$HOME/.zsh}/history"
HISTSIZE=10000000
SAVEHIST=10000000
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.

# Basic auto/tab complete:
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)		# Include hidden files.
setopt MENU_COMPLETE    # Tab complete automatically uses first file
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}' # Case insensitive tab complete



# --- Custom Functions ---
# Use lf to switch directories and bind it to ctrl-o
lfcd () {
    tmp="$(mktemp -uq)"
    trap 'rm -f $tmp >/dev/null 2>&1 && trap - HUP INT QUIT TERM PWR EXIT' HUP INT QUIT TERM PWR EXIT
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}

# Go through History with FZF
fzf-history() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac --height "50%" | sed -E 's/ *[0-9]*\*? *//' | sed -E 's/\\/\\\\/g')
}

# --- VI Settings ---

# Set Vi Mode
bindkey -v
export KEYTIMEOUT=1

# Change cursor shape for different vi modes.
function zle-keymap-select () {
    case $KEYMAP in
        vicmd) echo -ne '\e[1 q';;      # block
        viins|main) echo -ne '\e[5 q';; # beam
    esac
}
zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.


# Vim setup change inside anything
autoload -Uz select-bracketed select-quoted
zle -N select-quoted
zle -N select-bracketed
for km in viopp visual; do
  bindkey -M $km -- '-' vi-up-line-or-history
  for c in {a,i}${(s..)^:-\'\"\`\|,./:;=+@}; do
    bindkey -M $km $c select-quoted
  done
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do
    bindkey -M $km $c select-bracketed
  done
done

# Surround Editing
autoload -Uz surround
zle -N delete-surround surround
zle -N add-surround surround
zle -N change-surround surround
bindkey -M vicmd cs change-surround
bindkey -M vicmd ds delete-surround
bindkey -M vicmd ys add-surround
bindkey -M visual S add-surround

# Use jk to escape
bindkey -M viins 'jk' vi-cmd-mode

# --- Keybinds ---

# Alt Key Binding for words
bindkey "\e[1;3C" forward-word
bindkey "\e[1;3D" backward-word
# Alt+Backspace deletes word
bindkey '\e^?' backward-kill-word
# Edit line in mvim with ctrl-e:
bindkey '^e' edit-command-line

# Set to WORDCHARS to empty to make Alt+Backspace behave more like Bash
WORDCHARS=''
 
# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'left' vi-backward-char
bindkey -M menuselect 'down' vi-down-line-or-history
bindkey -M menuselect 'up' vi-up-line-or-history

bindkey -s '^o' '^ulfcd\n'
bindkey '^[[P' delete-char
bindkey -s '^t' '^ufzf-history\n'
